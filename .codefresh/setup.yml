version: '1.0'
steps:

  check_env:
    title: Check environment for required variables
    image: bash:4.4.23
    commands:
      - echo 'Checking for K8S_NAME, AZ_CLIENT_ID, and AZ_CLIENT_SECRET...'
      - bash -c '[[ -z $K8S_NAME || -z $AZ_CLIENT_ID || -z $AZ_CLIENT_SECRET ]] && exit 1 || true'

  az_setup_aks_cluster:
    title: Setup AKS cluster using AZ command line
    image: microsoft/azure-cli:latest
    commands:
      - apk add --update make bash git && wget -q https://storage.googleapis.com/kubernetes-release/release/v1.10.10/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl
      - chmod +x ./scripts/az_setup.sh
      - set +e; make az_setup; cf_export RC=$?
    
  # load_tfstate:
  #   title: Attempt to load Terraform statefile from Codefresh context
  #   image: codefresh/cli:0.8.54
  #   commands:
  #     - apk add --update make bash
  #     - chmod +x ./scripts/codefresh-load-tfstate.sh
  #     - make codefresh-load-tfstate || echo "Skipping."

  # setup_aks_cluster:
  #   title: Setup AKS cluster using Terraform
  #   image: hashicorp/terraform:latest
  #   commands:
  #     - apk add --update make bash
  #     - chmod +x ./scripts/setup.sh
  #     - set +e; make setup; cf_export RC=$?

  # save_tfstate:
  #   title: Save Terraform statefile to Codefresh context
  #   image: codefresh/cli:0.8.54
  #   commands:
  #     - apk add --update make bash
  #     - chmod +x ./scripts/codefresh-save-tfstate.sh
  #     - make codefresh-save-tfstate
  #     - exit ${{RC}}

  create_kubernetes_resources:
    title: Create additional Kubernetes resources
    image: lachlanevenson/k8s-kubectl:v1.10.4
    commands:
      - export KUBECONFIG="$(pwd)/kubernetes/kubeconfig.yaml"
      - cd kubernetes/
      - kubectl apply -f service-account.yaml
      - kubectl apply -f role-binding.yaml
      
  get_token:
    title: Extract token from Kubernetes secret
    image: lachlanevenson/k8s-kubectl:v1.10.4
    commands:
      - export KUBECONFIG="$(pwd)/kubernetes/kubeconfig.yaml"
      - export SECRET_ID="$(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')"
      - cf_export K8S_TOKEN=$(kubectl -n kube-system get secret $SECRET_ID -o jsonpath='{.data.token}')

  # add_cluster:
  #   title: Add AKS cluster to Codefresh account
  #   image: byrnedo/alpine-curl:0.1.5
  #   commands:
  #     - apk add --update make bash jq
  #     - export K8S_CA="$(cat kubernetes/kubeca.txt)"
  #     - export K8S_HOST="$(cat kubernetes/kubehost.txt)"
  #     - chmod +x ./scripts/codefresh-add-cluster.sh
  #     - make codefresh-add-cluster

  # load_tfstate_helm:
  #   title: Attempt to load Terraform statefile from Codefresh context
  #   image: codefresh/cli:0.8.54
  #   commands:
  #     - apk add --update make bash
  #     - chmod +x ./scripts_helm/codefresh-load-tfstate.sh
  #     - make codefresh-load-tfstate-helm || echo "Skipping."

  install_helm_chart:
    title: Setup AKS cluster using Terraform
    image: hashicorp/terraform:latest
    commands:
      - apk add --update ca-certificates make bash git && wget -q https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm && chmod +x /usr/local/bin/helm
#      - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.10/bin/linux/amd64/kubectl
#      - chmod +x ./kubectl
#      - mv ./kubectl /usr/local/bin/kubectl
      - chmod +x ./scripts_helm/setup.sh
      - set +e; make setup-helm; cf_export RC=$?

  # save_tfstate_helm:
  #   title: Save Terraform statefile to Codefresh context
  #   image: codefresh/cli:0.8.54
  #   commands:
  #     - apk add --update make bash
  #     - chmod +x ./scripts_helm/codefresh-save-tfstate.sh
  #     - make codefresh-save-tfstate-helm
  #     - exit ${{RC}}